// eslint-disable-next-line
const dotenv = require('dotenv');
dotenv.config();

const path = require('path');
const webpack = require('webpack');
const VueLoaderPlugin = require('vue-loader/lib/plugin');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const WorkboxPlugin = require('workbox-webpack-plugin');
const WebpackPwaManifest = require('webpack-pwa-manifest');
const RobotstxtPlugin = require('robotstxt-webpack-plugin');
const jsonData = require('./data.json');

const options = {
  filePath: path.resolve(__dirname, './robots.txt'),
};

module.exports = {
  entry: './js/app.js',
  output: {
    path: path.resolve(__dirname, 'dist'),
    filename: 'js/[name].[hash].bundle.js',
    chunkFilename: 'js/[name].[hash].bundle.js',
  },
  devServer: {
    contentBase: path.join(__dirname, 'dist'),
    compress: true,
    historyApiFallback: true,
    port: process.env.PORT || 9000,
    before(app) {
      app.get('/chart/:id', (req, res) => {
        setTimeout(() => {
          res.setHeader('Content-Type', 'application/json');
          res.json(jsonData[req.params.id]);
        }, 500);
      });
      // eslint-disablbe-next-line
      app.get('/chart', (req, res) => {
        res.setHeader('Content-Type', 'application/json');
        res.json(jsonData);
      });
    },
  },
  module: {
    rules: [
      {
        test: /\.vue$/,
        loader: 'vue-loader',
      },
      {
        test: /\.js$/,
        exclude: /(node_modules)/,
        loader: 'babel-loader',
        query: {
          presets: ['@babel/preset-env'],
        },
      },
      {
        test: /\.scss$/,
        loader: 'style-loader!css-loader!sass-loader',
      },
      {
        test: /\.(woff(2)?|ttf|eot|svg)(\?v=\d+\.\d+\.\d+)?$/,
        use: [
          {
            loader: 'file-loader',
            options: {
              name: '[name].[ext]',
              outputPath: 'fonts/',
            },
          },
        ],
      },
    ],
  },
  stats: {
    colors: true,
  },
  optimization: {
    // runtimeChunk: 'single',
    splitChunks: {
      chunks: 'all',
      // chunks(chunk) {
      //   console.log(chunk.name);
      //   // exclude `my-excluded-chunk`
      //   return chunk.name !== 'my-excluded-chunk';
      // },
    },
  },
  devtool: 'source-map',
  plugins: [
    new RobotstxtPlugin(options),
    new VueLoaderPlugin(),
    new MiniCssExtractPlugin({
      filename: 'css/[name].css',
      chunkFilename: '[id].css',
    }),
    new WorkboxPlugin.GenerateSW({
      // these options encourage the ServiceWorkers to get in there fast
      // and not allow any straggling "old" SWs to hang around
      clientsClaim: true,
      skipWaiting: true,
    }),
    new HtmlWebpackPlugin({
      template: path.resolve(__dirname, 'template.html'),
      filename: path.resolve(`${__dirname}/dist/index.html`),
      favicon: path.resolve(__dirname, './assets/icons/favicon-32x32.png'),
    }),
    new webpack.DefinePlugin({
      'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV || 'development'),
      'process.env.BASE_URL': JSON.stringify(process.env.BASE_URL || '/'),
      'process.env.REST_API': JSON.stringify(process.env.REST_API || '/'),
      'process.env.PORT': JSON.stringify(process.env.PORT || 9000),
    }),
    new WebpackPwaManifest({
      name: 'My Progressive Web App',
      short_name: 'MyPWA',
      description: 'My awesome Progressive Web App!',
      background_color: '#ffffff',
      theme_color: '#4DBA87',
      start_url: './index.html',
      crossorigin: 'use-credentials',
      icons: [
        {
          src: path.resolve(__dirname, './assets/icons/android-chrome-192x192.png'),
          sizes: '192x192',
        },
        {
          src: path.resolve(__dirname, './assets/icons/android-chrome-512x512.png'),
          size: '512x512',
        },
      ],
    }),
  ],

};
